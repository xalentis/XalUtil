// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// oh_compress
int oh_compress(NumericVector onehot);
RcppExport SEXP _XalUtil_oh_compress(SEXP onehotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type onehot(onehotSEXP);
    rcpp_result_gen = Rcpp::wrap(oh_compress(onehot));
    return rcpp_result_gen;
END_RCPP
}
// oh_decompress
NumericVector oh_decompress(int compressed, int size);
RcppExport SEXP _XalUtil_oh_decompress(SEXP compressedSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type compressed(compressedSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(oh_decompress(compressed, size));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_XalUtil_oh_compress", (DL_FUNC) &_XalUtil_oh_compress, 1},
    {"_XalUtil_oh_decompress", (DL_FUNC) &_XalUtil_oh_decompress, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_XalUtil(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
